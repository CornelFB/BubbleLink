openapi: 3.0.3
info:
  title: BubbleLink
  description: API BUBBLELINK
  version: "1.02"
  
tags:
- name: login
  description: Login operation
- name: user info
  description: Operations for getting and updating user info

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
         description: User detail
         required: true
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInit'
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
        '400':
          description: Invalid input or parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /users/{username}/existence:
    parameters:
     - name: username
       in: path
       required: true  
       description: The unique identifier for a user.
       schema:
        $ref: '#/components/schemas/UserName'
    get:
      tags: ["user info"]
      summary: Get a user's existence
      description: Check if a user exists
      operationId: getExistence
      security:
        - PrettyGoodSecurity: []
      responses:
        '200':
          description: The users status
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: Invalid input or parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized access due to missing or invalid security token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        
  /users/{id}/name:
    parameters:
     - name: id
       in: path
       required: true  
       description: The unique identifier for a user.
       schema:
        $ref: '#/components/schemas/UserId'
    put:
      tags: ["user info"]
      summary: Update a user's name
      description: Update the username for a user identified by their unique ID.
      operationId: setMyUserName 
      security:
        - PrettyGoodSecurity: []
      requestBody:
        description: The new username to be assigned to the user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserName'
      responses:
        '204':
          description: Successfully updated the username.
        '400':
          description: Invalid input or parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized access due to missing or invalid security token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      tags: ["user info"]
      summary: Get a user's name
      description: Get the name for a user identified by their unique ID.
      operationId: getMyName
      security:
        - PrettyGoodSecurity: []
      responses:
        '200':
          description: Successfully got the photo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserName'
        '400':
          description: Invalid input or parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized access due to missing or invalid security token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /users/{id}/photo:
    parameters:
     - name: id
       in: path
       required: true
       description: The unique identifier for a user.
       schema:
        $ref: '#/components/schemas/UserId'
    put:
      tags: ["user info"]
      summary: Update a user's photo
      description: Update the photo for a user identified by their unique ID.
      operationId: setMyPhoto
      security:
        - PrettyGoodSecurity: []
      requestBody:
        description: The new photo to be assigned to the user.
        required: true
        content:
         image/jpeg:
            schema:
              $ref: '#/components/schemas/JPEGimage'
      responses:
        '204':
          description: Successfully updated the photo.
        '400':
          description: Invalid input or parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized access due to missing or invalid security token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      tags: ["user info"]
      summary: Get a user's photo
      description: Get the photo for a user identified by their unique ID.
      operationId: getMyPhoto
      responses:
        '200':
          description: Successfully got the photo.
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/JPEGimage'
        '400':
          description: Invalid input or parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized access due to missing or invalid security token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components: 
  securitySchemes:
    PrettyGoodSecurity:
      type: apiKey
      in: header
      name: security_token
      description: Security token used for authorization.
  schemas:
    UserName:
      type: string
      description: A username with a length between 3 and 16 characters.
      minLength: 3
      maxLength: 16
      pattern: '^[^@!.\s]{3,16}$'
      example: Adrian Chiriac
    UserInit:
      type: object
      properties:
        Username:
          $ref: '#/components/schemas/UserName'
        Country:
            type: string
            description: The country of the user.
            pattern: '^.*?$'
            example: Romania
        City:
            type: string
            description: The city of the user.
            pattern: '^.*?$'
            example: Craiova
    UserId:
        type: integer
        description: The unique identifier for a user.
        example: 12
    ErrorMessage:
      type: string
      pattern: '^.*?$'
      example: Error
      minLength: 1
      maxLength: 10000
      description: Error Message
    JPEGimage:
      description: jpeg image
      type: string
      format: binary
      minLength: 40
      maxLength: 10000000
